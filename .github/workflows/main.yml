name: Serverless Continuous Integration
run-name: ${{ github.actor }} is running Continuous Integration on GitHub Actions ðŸš€
on:
  push:
    branches:  [ main, "*"]
    tags:
      - 'v*'

jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Run installation of dependencies commands
        run: npm install

  code-unit-testing:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Run installation of dependencies commands
        run: npm install
      - name: Run unit testing command
        run: npm test

  reveal-secret:
    runs-on: ubuntu-latest
    needs: code-unit-testing
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Run installation of dependencies commands
        run: npm install
      - name: Run unit testing command
        run: npm test
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Read secrets from AWS Secrets Manager into environment variables
        uses: aws-actions/aws-secretsmanager-get-secrets@v2s
        with:
          secrets: |
            my_secret_1
            app1/dev/*
          parse-json: true
      - name: Check if env variable is set after fetching secrets
        run: if [ -z ${MY_SECRET_1+x} ]; then echo "MY_SECRET_1 is unset";

  # deploy:
  #   name: deploy
  #   runs-on: ubuntu-latest
  #   needs: code-unit-testing
  #   strategy:
  #     matrix:
  #       node-version: [18.x]
  #   steps:
  #   - uses: actions/checkout@v4
  #   - run: npm ci
  #   - name: serverless deploy
  #     uses: serverless/github-action@v3.2
  #     with:
  #       args: deploy
  #     env:
  #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      